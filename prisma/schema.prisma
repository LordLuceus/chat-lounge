datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("POSTGRES_PRISMA_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts    Account[]
    sessions    Session[]
    apiKeys     ApiKey[]
    assistants  Assistant[]
    preferences Preference[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ApiKey {
    id        String     @id @default(cuid())
    provider  AIProvider
    key       String     @unique
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    userId    String
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Assistant {
    id           String   @id @default(cuid())
    name         String
    description  String?
    model        String
    instructions String?
    voiceId      String?
    voiceEnabled Boolean  @default(false)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AIProvider {
    OPENAI
    MISTRAL
    ELEVENLABS
}

model Preference {
    id             String   @id @default(cuid())
    defaultVoiceId String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    userId         String
    user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
